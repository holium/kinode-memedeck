"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5878],{35878:function(e,t,n){n.d(t,{P:function(){return r}});var c=n(41973),a=n(54167);class o{async setTGBot(e,t,n){return fetch("".concat(o.BASE_URL,"/set_tg_bot/").concat(e,"/").concat(t,"/").concat(n),{method:"POST",headers:{"Content-Type":"application/json"}}).then(e=>e.json())}async setPublicAddress(e){return fetch("".concat(o.BASE_URL,"/set_public_address"),{method:"POST",body:JSON.stringify({url:e}),headers:{"Content-Type":"application/json"}}).then(e=>e.json())}xGetRedirectUrl(){let e=(0,a.ZB)();return"".concat(o.BASE_URL,"/v1/auth/twitter/login?redirect_url=").concat(e)}async getMe(){return fetch("".concat(o.BASE_URL,"/v1/profile/me"),{credentials:"include"}).then(e=>e.json())}logout(){return fetch("".concat(o.BASE_URL,"/v1/auth/logout"),{credentials:"include"})}async getProfile(e){return fetch("".concat(o.BASE_URL,"/v1/profile/").concat(e),{credentials:"include"}).then(e=>e.json())}async getProfileByHandle(e){return fetch("".concat(o.BASE_URL,"/v1/profile/by_handle/").concat(e),{credentials:"include"}).then(e=>e.json())}async getInvitedBy(){return fetch("".concat(o.BASE_URL,"/v1/profile/me/invited_by"),{credentials:"include"}).then(e=>e.json())}async getFeed(e,t){let{start:n=0,limit:c=20}=e,a=new URLSearchParams;return a.append("start",n.toString()),a.append("limit",c.toString()),fetch("".concat(o.BASE_URL,"/v1/feed?").concat(a),{credentials:"include",signal:t}).then(e=>e.json())}async getLibrary(e,t){let{search:n="",source:c=["upload","generated"],start:a=0,limit:r=20}=e,s=new URLSearchParams;return n&&s.append("search",n),c.length>0&&s.append("source",c.join(",")),s.append("limit",r.toString()),s.append("start",a.toString()),fetch("".concat(o.BASE_URL,"/v1/profile/me/library?").concat(s),{credentials:"include",signal:t}).then(e=>e.json())}async getUploads(e,t){let{deckId:n,search:c="",start:a=0,limit:r=20}=e,s=new URLSearchParams;return n&&s.append("deck_id",n),c&&s.append("search",c),s.append("limit",r.toString()),s.append("start",a.toString()),fetch("".concat(o.BASE_URL,"/v1/profile/me/uploads?").concat(s),{credentials:"include",signal:t}).then(e=>e.json())}async getMemesByHandle(e,t,n){let{search:c="",start:a=0,limit:r=20}=t,s=new URLSearchParams;return c&&s.append("search",c),s.append("limit",r.toString()),s.append("start",a.toString()),fetch("".concat(o.BASE_URL,"/v1/profile/by_handle/").concat(e,"/memes?").concat(s),{credentials:"include",signal:n}).then(e=>e.json())}async getMeme(e){return fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e),{credentials:"include"}).then(e=>e.json())}async getSavedMemes(e,t){let{search:n="",start:c=0,limit:a=20,user_handle:r}=e,s=new URLSearchParams;return n&&s.append("search",n),r&&s.append("user_handle",r),s.append("limit",a.toString()),s.append("start",c.toString()),fetch("".concat(o.BASE_URL,"/v1/memes/saved?").concat(s),{credentials:"include",signal:t}).then(e=>e.json())}async deleteMeme(e){return fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e),{method:"DELETE",credentials:"include"}).then(e=>e.json())}async postMeme(e){let{filename:t,filetype:n,source_url:c,bytes:a}=e;try{let e={filename:t,filetype:n};c?e={...e,source_url:c}:a&&(e={...e,bytes:Array.from(new Uint8Array(a))});let r=await fetch("".concat(o.BASE_URL,"/v1/memes"),{method:"POST",body:JSON.stringify(e),credentials:"include",headers:{"Content-Type":"application/json"}});if(!r.ok)throw Error("HTTP Error: ".concat(r.status));let s=await r.json();return console.log("Meme creation response:",s),s}catch(e){console.error("Error creating meme:",e)}}async postMemeTextOverlay(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/text_overlay"),{method:"POST",body:JSON.stringify(t),credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status));let c=await n.json();return console.log("Meme text overlay response:",c),c}catch(e){console.error("Error creating meme text overlay:",e)}}async createComposedMeme(e){try{let t=await fetch("".concat(o.BASE_URL,"/v1/memes/composed"),{method:"POST",body:JSON.stringify(e),credentials:"include",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP Error: ".concat(t.status));let n=await t.json();return console.log("POST Compose Meme response:",n),n}catch(e){console.error("Error POST Compose Meme:",e)}}async updateMemePanel(e,t,n){try{let c=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/panel/").concat(t),{method:"PUT",body:JSON.stringify(n),credentials:"include",headers:{"Content-Type":"application/json"}});if(!c.ok)throw Error("HTTP Error: ".concat(c.status));let a=await c.json();return console.log("PUT Meme Panel response:",a),a}catch(e){console.error("Error PUT Meme Panel:",e)}}async updateComposedMemeLayout(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/layout"),{method:"PUT",body:JSON.stringify(t),credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status));let c=await n.json();return console.log("PUT Compose Meme Layout response:",c),c}catch(e){console.error("Error PUT Compose Meme Layout:",e)}}async composedUpload(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/composed-upload"),{method:"POST",body:JSON.stringify(t),credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status));let c=await n.json();return console.log("POST Compile Meme response:",c),c}catch(e){console.error("Error POST Compile Meme:",e)}}async getTrending(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5;return fetch("".concat(o.BASE_URL,"/v1/search/trending?start=0&limit=").concat(e),{credentials:"include"}).then(e=>e.json())}async getRecommendedFollows(){return fetch("".concat(o.BASE_URL,"/v1/recommended-follow"),{credentials:"include"}).then(e=>e.json())}async createPost(e){return(await fetch("".concat(o.BASE_URL,"/v1/feed"),{method:"POST",body:JSON.stringify(e),credentials:"include",headers:{"Content-Type":"application/json"}})).json()}async createDeck(e){return(await fetch("".concat(o.BASE_URL,"/v2/decks"),{method:"POST",body:JSON.stringify(e),credentials:"include",headers:{"Content-Type":"application/json"}})).json()}async updateDeck(e,t){return(await fetch("".concat(o.BASE_URL,"/v2/decks/").concat(e),{method:"PUT",body:JSON.stringify(t),credentials:"include",headers:{"Content-Type":"application/json"}})).json()}async submitPostToDeck(e,t){return(await fetch("".concat(o.BASE_URL,"/v2/decks/").concat(e,"/submit"),{method:"POST",body:JSON.stringify(t),credentials:"include",headers:{"Content-Type":"application/json"}})).json()}async deleteDeck(e){return(await fetch("".concat(o.BASE_URL,"/v2/decks/").concat(e),{method:"DELETE",credentials:"include"})).json()}async getDeck(e,t,n){let{interval:c,limit:a}=t,r=new URLSearchParams;return c&&r.append("interval",c),a&&r.append("limit",a.toString()),fetch("".concat(o.BASE_URL,"/v2/decks/").concat(e,"?").concat(r),{credentials:"include",signal:n}).then(e=>e.json())}async getDecks(e,t){let{start:n,interval:c,limit:a,user_handle:r,meme_id:s}=e,i=new URLSearchParams;return n&&i.append("start",n.toString()),c&&i.append("interval",c.toString()),a&&i.append("limit",a.toString()),r&&i.append("user_handle",r.toLowerCase()),s&&i.append("meme_id",s),(await fetch("".concat(o.BASE_URL,"/v2/decks?").concat(i),{credentials:"include",signal:t})).json()}async getTopDecks(e,t){let{interval:n,limit:c,category:a}=e,r=new URLSearchParams;return n&&r.append("interval",n.toString()),c&&r.append("limit",c.toString()),a&&r.append("category",a),fetch("".concat(o.BASE_URL,"/v1/search/deck?").concat(r),{credentials:"include",signal:t}).then(e=>e.json())}async deletePost(e){return(await fetch("".concat(o.BASE_URL,"/v1/feed/").concat(e),{method:"DELETE",credentials:"include"})).json()}async publishMeme(e){try{let t=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e.replace("meme:",""),"/publish"),{method:"POST",body:null,credentials:"include",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP Error: ".concat(t.status," ").concat(t.body));return await t.json()}catch(e){console.error("deck publish error:",e)}}async unpublishMeme(e){try{let t=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e.replace("meme:",""),"/publish"),{method:"DELETE",body:null,credentials:"include",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP Error: ".concat(t.status," ").concat(t.body));return await t.json()}catch(e){console.error("deck publish error:",e)}}async getMemeReactions(e){let t=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e.replace("meme:",""),"/reacts"),{credentials:"include"}),n=await t.json();return n.reduce((e,t)=>(e[t.react]||(e[t.react]={count:0,data:n}),e[t.react].count+=1,e),{})}async createMemeReaction(e,t){return(await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e.replace("meme:",""),"/reacts"),{method:"POST",credentials:"include",body:JSON.stringify({react:t}),headers:{"Content-Type":"application/json"}})).json()}async deleteMemeReaction(e,t){return(await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e.replace("meme:",""),"/reacts"),{method:"DELETE",credentials:"include",body:JSON.stringify({react:t}),headers:{"Content-Type":"application/json"}})).json()}async searchTags(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;return fetch("".concat(o.BASE_URL,"/v1/tags/search?search=").concat(e,"&limit=").concat(t,"&sort=Recent"),{credentials:"include"}).then(e=>e.json())}async tagResource(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/tags"),{method:"POST",body:JSON.stringify({resource_id:e,tag:t}),credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status," ").concat(n.body));let c=await n.json();return console.log("tag resource response:",c),c}catch(e){console.error("tag resource error:",e)}}async untagResource(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/tags"),{method:"DELETE",body:JSON.stringify({resource_id:e,tag_id:t}),credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status," ").concat(n.body));let c=await n.json();return console.log("untag resource response:",c),c}catch(e){console.error("untag resource error:",e)}}async saveMeme(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/save"),{method:t?"DELETE":"POST",body:null,credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status," ").concat(n.body));let c=await n.json();return console.log("deck bookmark response:",c),c}catch(e){console.error("deck bookmark error:",e)}}async updateMeme(e,t){try{let n=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e),{method:"PUT",body:JSON.stringify(t),credentials:"include",headers:{"Content-Type":"application/json"}});if(!n.ok)throw Error("HTTP Error: ".concat(n.status));let c=await n.json();return console.log("Meme put response:",c),c}catch(e){console.error("Error updating meme:",e)}}async search(e,t){let{search:n="",start:a=0,limit:r=20,interval:s=c.u.Week,deck_id:i="",sort_by:d=c.a.Hot}=e,l=new URLSearchParams;return n&&l.append("search",n),i&&l.append("deck_id",i),l.append("interval",s),l.append("limit",r.toString()),l.append("start",a.toString()),l.append("sort_by",d),fetch("".concat(o.BASE_URL,"/v1/search?").concat(l),{credentials:"include",signal:t}).then(e=>e.json())}async searchUser(e,t){let{search:n="",start:c=0,limit:a=20}=e,r=new URLSearchParams;return n&&r.append("search",n),r.append("limit",a.toString()),r.append("start",c.toString()),fetch("".concat(o.BASE_URL,"/v1/search/user?").concat(r),{credentials:"include",signal:t}).then(e=>e.json())}async getTopCharacters(e,t){let{interval:n,limit:c}=e,a=new URLSearchParams;return n&&a.append("interval",n.toString()),c&&a.append("limit",c.toString()),fetch("".concat(o.BASE_URL,"/v1/search/character?").concat(a),{credentials:"include",signal:t}).then(e=>e.json())}async randomMeme(e){return fetch("".concat(o.BASE_URL,"/v1/memes/random?search=").concat(e||"pepe"),{credentials:"include"}).then(e=>e.json())}async getAnalytics(){return fetch("".concat(o.BASE_URL,"/v1/analytics"),{credentials:"include"}).then(e=>e.json())}async getProductUpdates(){return fetch("".concat(o.BASE_URL,"/v1/product_updates"),{credentials:"include"}).then(e=>e.json())}async dismissProductUpdate(e){return fetch("".concat(o.BASE_URL,"/v1/product_updates"),{method:"DELETE",credentials:"include",body:JSON.stringify({product_update_id:e}),headers:{"Content-Type":"application/json"}}).then(e=>e.json())}async faceswapUpload(e,t,n){try{let c=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/panel/").concat(t,"/faceswap-upload"),{method:"POST",body:JSON.stringify(n),credentials:"include",headers:{"Content-Type":"application/json"}});if(!c.ok)throw Error("HTTP Error: ".concat(c.status));let a=await c.json();return console.log("POST faceswap upload response:",a),a}catch(e){console.error("Error POST faceswap upload:",e)}}async faceswapDelete(e,t,n){try{let c=await fetch("".concat(o.BASE_URL,"/v1/memes/").concat(e,"/panel/").concat(t,"/faceswap-upload"),{method:"DELETE",body:JSON.stringify(n),credentials:"include",headers:{"Content-Type":"application/json"}});if(!c.ok)throw Error("HTTP Error: ".concat(c.status));let a=await c.json();return console.log("DELETE faceswap upload response:",a),a}catch(e){console.error("Error POST faceswap upload:",e)}}}o.BASE_URL=(0,a.bR)();let r=new o},41973:function(e,t,n){var c,a,o,r;n.d(t,{a:function(){return a},u:function(){return c}}),(o=c||(c={})).Today="today",o.Week="week",o.Month="month",o.Year="year",o.AllTime="all-time",(r=a||(a={})).Hot="hot",r.Recent="recent"},54167:function(e,t,n){n.d(t,{BB:function(){return a},Dt:function(){return s},L:function(){return l},ZB:function(){return d},bR:function(){return i},cm:function(){return o},j7:function(){return r}});var c=n(93126);let a="true"===c.env.NEXT_PUBLIC_IS_PROD,o="true"===c.env.NEXT_PUBLIC_IS_STAGING,r=!0,s=()=>/Android/i.test(navigator.userAgent);function i(){return r?window.location.origin+"/memedeck:memedeck:meme-deck.os":a?"https://api.memedeck.xyz":o?"https://staging-api.memedeck.xyz":"http://localhost:8080"}function d(){return r?window.location.origin+"/memedeck:memedeck:meme-deck.os/home":a?"https://memedeck.xyz/home":o?"https://staging.memedeck.xyz/home":"http://localhost:3000/home"}function l(){return a?"https://memedeck.xyz":o?"https://staging.memedeck.xyz":"http://localhost:3000"}}}]);